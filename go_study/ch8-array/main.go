package main

import "fmt"

/*
数组：存放元素的容器
必须指定存放的元素的类型和容量(长度)
数组的长度是数组类型的一部分
同一数组中只能存放相同的数据类型
*/

func main() {
	// 数组的声明
	// var a1 [3]bool // 表示长度为3的数组，[true,false,true]
	// var a2 [4]int64
	// fmt.Printf("%T %T",a1,a2)

	//数组的初始化
	// 如果不初始化，默认元素都是零值(布尔值：false,整型和浮点型都是0，字符串："")
	// 1.初始化方式1
	// a1 := [3]bool{true, false, true}
	// fmt.Println(a1)
	// fmt.Printf("%v %T",a1,a1)

	// 2.初始化方式2
	// '...'根据初始值自动推断数组的长度是多少
	// a10 := [...]int{0,1,2,3,4,5,6,7,8,9}
	// fmt.Println(a10)

	// 3.初始化方式3
	// a2 := [5]int{1,2}
	// fmt.Println(a2)   //结果自动补零[1 2 0 0 0]
	// // 根据索引初始化--指定索引的值
	// a3 := [5]int{0:1,4:2}
	// fmt.Println(a3)    //[1 0 0 0 2]

	// 4.数组的遍历
	// citys := [...]string{"北京", "天津", "上海"}
	// 1）根据索引遍历
	// for i := 0; i < len(citys); i++ {
	// 	fmt.Println(citys[1])
	// }
	// 2) for range 遍历
	// for i,v := range citys{
	// 	fmt.Println(i,v)
	// }

	//5.多维数组
	// [11 22]  [33 44] [55 66]
	// aa := [3][2]int{                //表示有三个数组，每个数组中有两个元素
	// 	[2]int{11,22},
	// 	[2]int{33,44},
	// 	[2]int{55,66},
	// }
	// fmt.Println(aa)  //[[11 22] [33 44] [55 66]]

	// 多维数组的遍历
	// for _,v1 := range aa{
	// 	fmt.Println(v1)           //遍历每个数组
	// 	for _,v2 := range v1{
	// 		fmt.Println(v2)         //继续遍历每个数组中的元素
	// 	}
	// }

	//数组是值类型

	// 求[1，3，4，6，7]所有元素的和
	// a:= [...]int{1,3,4,6,7}
	// sum := 0
	// for _,v := range a{
	// 	sum += v
	// }
	// fmt.Println(sum)

	//找出数组中和为指定值的两个元素的下标，比如从数组[1，3，4，6，7]找出和为8的两个元素的下标分辨为(0,3)和(1，2)
	/*
		定义两个for循环，外层的从第一个开始遍历
		内层的for循环从外层的后面的那个开始找
		他们两个数的和为8
	*/
	// a := [...]int{1, 3, 4, 6, 7}
	// for i := 0; i < len(a); i++ {
	// 	for j := i + 1; j < len(a); j++ {
	// 		if a[i]+a[j] == 8 {
	// 			fmt.Printf("(%d,%d)", i, j)
	// 		}
	// 	}
	// }    // 得到下标(0,4)

	



}
